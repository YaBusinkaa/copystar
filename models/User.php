<?php

namespace app\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $surname
 * @property string $name
 * @property string $patronomic
 * @property string $username
 * @property string $email
 * @property string $password
 * @property int $role
 *
 * @property Basket[] $baskets
 * @property Order[] $orders
 */
class User extends \yii\db\ActiveRecord implements IdentityInterface
{
    public $password_repeat;
    public $rules_accept;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['surname', 'name', 'username', 'email', 'password', 'password_repeat'], 'required'],
            [['surname', 'name', 'patronomic'],  'match', 'pattern' => '/^[а-яА-Я -]*$/u','message'=>'разрешенные символы кириллица, пробел и тире'],
            [['username'],  'match', 'pattern' => '/^[a-zA-Z0-9-]*$/u','message'=>'разрешенные символы латиница, цифры и тире'],
            [['role'], 'integer'],
            [['surname', 'name', 'patronomic', 'username', 'email', 'password'], 'string', 'max' => 255],
            [['password'], 'string', 'min' => 6],
            [['rules_accept'],'compare', 'compareValue' => 1],
            ['password_repeat', 'compare', 'compareAttribute' => 'password'],
            [['username'], 'unique'],

            [['email'], 'email'],
            [['email'], 'unique'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'surname' => 'фамилия',
            'name' => 'имя',
            'patronomic' => 'отчество',
            'username' => 'логин',
            'email' => 'Email',
            'password' => 'пароль',
            'role' => 'Role',
            'password_repeat' =>'повторите пароль',
            'rules_accept' =>'согласие с правилами регистрации'

        ];
    }

    /**
     * Gets query for [[Baskets]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBaskets()
    {
        return $this->hasMany(Basket::className(), ['user_id' => 'id']);
    }

    /**
     * Gets query for [[Orders]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getOrders()
    {
        return $this->hasMany(Order::className(), ['user_id' => 'id']);
    }
    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * Finds an identity by the given token.
     *
     * @param string $token the token to be looked for
     * @return IdentityInterface|null the identity object that matches the given token.
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return null;
    }

    /**
     * @return int|string current user ID
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return string|null current user auth key
     */
    public function getAuthKey()
    {
        return null;
    }

    /**
     * @param string $authKey
     * @return bool|null if auth key is valid for current user
     */
    public function validateAuthKey($authKey)
    {
        return null;
    }
    public function validatePassword($password)
    {
        return $this->password === md5($password);
    }
    public static function findByUsername($username)
    {
        return User::findOne(['username' => $username]);
    }

    public function beforeSave($insert)
    {
        $this->password = md5($this->password);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
    public function isAdmin(){
        return $this->role === 2;
    }


}
